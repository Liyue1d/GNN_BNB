# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TwoOpt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TwoOpt')
    _TwoOpt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TwoOpt', [dirname(__file__)])
        except ImportError:
            import _TwoOpt
            return _TwoOpt
        try:
            _mod = imp.load_module('_TwoOpt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TwoOpt = swig_import_helper()
    del swig_import_helper
else:
    import _TwoOpt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class TwoOpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TwoOpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TwoOpt, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _TwoOpt.new_TwoOpt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TwoOpt.delete_TwoOpt
    __del__ = lambda self: None

    def getCost(self, cost_matrix: 'double const *', row_number: 'int', col_number: 'int') -> "double":
        return _TwoOpt.TwoOpt_getCost(self, cost_matrix, row_number, col_number)

    def pathCost(self, currentOrder: 'int *', length_order: 'int', cost_matrix: 'double const *', departure_node: 'int', arrival_node: 'int') -> "double":
        return _TwoOpt.TwoOpt_pathCost(self, currentOrder, length_order, cost_matrix, departure_node, arrival_node)

    def pathSwap(self, currentOrder: 'int *', length_order: 'int', i: 'int', j: 'int') -> "int *":
        return _TwoOpt.TwoOpt_pathSwap(self, currentOrder, length_order, i, j)

    def optimize(self, order: 'double *', cost_matrix: 'double const *', departure_node: 'int', arrival_node: 'int', inf: 'double *', cuts_group: 'double *', score_value: 'double *', upper_bound: 'double', visits_group: 'double *', root_visits_group: 'double *') -> "void":
        return _TwoOpt.TwoOpt_optimize(self, order, cost_matrix, departure_node, arrival_node, inf, cuts_group, score_value, upper_bound, visits_group, root_visits_group)
TwoOpt_swigregister = _TwoOpt.TwoOpt_swigregister
TwoOpt_swigregister(TwoOpt)

# This file is compatible with both classic and new-style classes.


